Program { functions: [Function { name: "main", params: [], return_type: Int, body: Expression { kind: LetIn { binds: [("a", None, Expression { kind: Int(1), span: 30..31, type_context: Int }), ("b", None, Expression { kind: Binary { op: Add, lhs: Expression { kind: Int(2), span: 39..40, type_context: Int }, rhs: Expression { kind: Var("a"), span: 43..44, type_context: Int } }, span: 39..44, type_context: Int }), ("b", Some(Bool), Expression { kind: Binary { op: Less, lhs: Expression { kind: Var("b"), span: 58..59, type_context: Int }, rhs: Expression { kind: Int(10), span: 62..64, type_context: Int } }, span: 58..64, type_context: Bool })], body: Expression { kind: IfThenElse { condition: Expression { kind: Var("b"), span: 74..75, type_context: Bool }, yes: Expression { kind: Int(1), span: 81..82, type_context: Int }, no: Expression { kind: Int(2), span: 88..89, type_context: Int } }, span: 71..89, type_context: Int } }, span: 22..89, type_context: Int }, full_span: 0..89, name_span: 5..9 }] }