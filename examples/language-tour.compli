// -------------------------
// | COMPLI: LANGUAGE TOUR |
// -------------------------
//
// Print the AST of this file:
//   $ compli inspect-ast language-tour.compli [--typed]
// Print the lowered IR of this file:
//   $ compli inspect-ir language-tour.compli 
// Run the whole compiler pipeline to generate an object file (not yet linked):
//   $ compli generate language-tour.compli
// Run the whole compiler pipeline and link it to an executable:
//   $ compli build language-tour.compli
//
// One great feature of compli are the rather pretty error reports.
// Try and mess with this source file and introduce some syntax or type bugs.

//
// MAIN FUNCTION
//

// Every compli program needs a `main` function.
// It takes no arguments and must return an int that represents the exit code of the program.
// (To print stuff to the console, see the paragraph for the `trace` builtin at the end of this document.)
def main: int = 42

//
// DATA TYPES
//

// There are three primitive data types: int, float and bool.
def int_value: int = 42
def float_value: float = 0.5
def bool_value: bool = true

// You can define your own records to combine them (product types)
rec some_record = a: int, b: bool

// You can construct records and select their fields like so:
def construct_record: some_record = some_record(1, true)
def select_from_record(r: some_record): int = r.a

//
// FUNCTIONS
//

// A function consists of a name, a list of parameters, a return type and a body expression.
def foo(a: int, b: bool): float = 12.34

// The parenthesis are optional if there are no parameters.
// The following two definitions are equivalent:
def with_parens(): int = 0
def without_parens: int = 0

// Functions can be called like so:
def call_the_function: float = foo(1337, false)
def call_the_constant: int = without_parens()

//
// PRIMITIVE OPERATIONS
//

// Common basic operations for primitive types are supported.
def add(a: int, b: int): int = a + b
def sub(a: float, b: float): float = a - b
def gauss(n: int): int = (n * (n + 1)) / 2
def boolean(a: bool, b: bool, c: bool): bool = !a && b || !c
def square_root(x: float): float = sqrt(x)

// You must not mix data types. The following would not work:
// def illegal_mixup(a: int, b: float): int = a + b

//
// LET
//

// You can give names to temporary values.
def let_example(a: int): int = let square = a * a in square + 1

def complex_let_example(a: int): int = (
	let b = 2 * a,
		c = b + 1,
		c = c + b,
		// You can (optionally) annotate types for local bindings.
		// This wouldn't compile if the annotated type doesn't match the inferred.
		d: int = c + 1,
	in a + b + c
)

//
// IF
//

// There is a basic if-then-else expression for conditional evaluation.
def if_example(a: float, b: float): int = (
	if a > b then 0 else 1
)

//
// CASTING
//

// There are builtin functions to cast between primitives
def casting_example1: bool = 1 == cast_int(true)
def casting_example2: int = cast_int(0.5 + 0.5)
def casting_example3: float = 2.0 * cast_float(17)

//
// TRACING
//

// The `trace` builtin function is the only way for compli programs to print stuff to the terminal.
// The function returns its input argument as is but has the side-effect of printing it.
// Sadly, it isn't implemented for record types and only works for primitives.
def tracing_example: float = 1.0 + trace(6.0 * 6.0) // When called, this will print 36.

//
// INPUT
//

// The `input_int` builtin function get be called to get a single integer input from the user.
// See the `calculator.compli` example.
def give_me_an_integer: int = input_int()
